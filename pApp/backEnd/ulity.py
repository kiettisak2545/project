import base64
import hashlib
from cryptography.fernet import Fernet
from django.conf import settings
from urllib.parse import quote_plus, unquote_plus
from functools import lru_cache

# üîë ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏à‡∏≤‡∏Å SECRET_KEY ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ SHA256 ‡πÅ‡∏•‡∏∞‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏ß‡πâ
@lru_cache(maxsize=1)
def generate_key():
    key_material = hashlib.sha256(settings.SECRET_KEY.encode()).digest()
    return base64.urlsafe_b64encode(key_material)

fernet = Fernet(generate_key())

# üîê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (‡∏û‡∏£‡πâ‡∏≠‡∏° URL encoding)
def encrypt_url(value: str) -> str:
    encrypted = fernet.encrypt(value.encode()).decode()
    return quote_plus(encrypted)

# üîì ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)
def decrypt_url(encrypted_value: str) -> str:
    try:
        decoded_value = unquote_plus(encrypted_value)
        return fernet.decrypt(decoded_value.encode()).decode()
    except Exception as e:
        return f"Decryption error: {str(e)}"  # ‡∏´‡∏£‡∏∑‡∏≠ raise Exception ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á
